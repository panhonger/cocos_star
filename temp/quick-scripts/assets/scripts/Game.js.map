{"version":3,"sources":["Game.js"],"names":["cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","groundY","y","height","timer","starDuration","spawnNewStar","score","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","Math","random","randX","randY","jumpHeight","maxX","width","v2","start","update","dt","gameOver","gainScore","string","audioEngine","playEffect","stopAllActions","director","loadScene"],"mappings":"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","file":"Game.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n       /*\r\n       * 步骤六：1、添加生成星星需要的属性\r\n       * */\r\n        // 这个属性引用了星星预制资源\r\n        starPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        // 星星产生后消失时间的随机范围\r\n        maxStarDuration: 0,\r\n        minStarDuration: 0,\r\n        // 地面节点，用于确定星星生成的高度\r\n        ground: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\r\n        player: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n\r\n\r\n        /*\r\n        * 步骤九：2.1:添加分数显示 Label 的引用属性\r\n        * */\r\n        // score label 的引用\r\n        scoreDisplay: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n\r\n        /*\r\n        * 步骤十一：2.1 添加得分音效\r\n        * */\r\n        // 得分音效资源\r\n        scoreAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n    /*\r\n    * 步骤七：1、 添加生成星星的逻辑\r\n    * */\r\n    onLoad: function () {\r\n        // 获取地平面的 y 轴坐标\r\n        this.groundY = this.ground.y + this.ground.height/2;\r\n        /*\r\n        * 步骤十：1.1：spawnNewStar 调用 之前 加入计时需要的变量声明\r\n        * */\r\n        // 初始化计时器\r\n        this.timer = 0;\r\n        this.starDuration = 0;\r\n        // 生成一个新的星星\r\n        this.spawnNewStar();\r\n        // 初始化计分\r\n        this.score = 0;\r\n\r\n       /* /!*\r\n        * 步骤九：2.2：添加计分用的变量的初始化\r\n        * *!/\r\n        // 初始化计分\r\n        this.score = 0;*/\r\n    },\r\n    spawnNewStar: function() {\r\n        // 使用给定的模板在场景中生成一个新节点\r\n        var newStar = cc.instantiate(this.starPrefab);\r\n        // 将新增的节点添加到 Canvas 节点下面\r\n        this.node.addChild(newStar);\r\n        // 为星星设置一个随机位置\r\n        newStar.setPosition(this.getNewStarPosition());\r\n\r\n        /*\r\n        * 步骤八：1、保存了主角节点的引用\r\n        * */\r\n        // 在星星组件上暂存 Game 对象的引用\r\n        newStar.getComponent('Star').game = this;\r\n\r\n\r\n        /*\r\n        * 步骤十：1.2：加入重置计时器的逻辑\r\n        * */\r\n        // 重置计时器，根据消失时间范围随机取一个值\r\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\r\n        this.timer = 0;\r\n    },\r\n\r\n    getNewStarPosition: function () {\r\n        var randX = 0;\r\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\r\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\r\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\r\n        var maxX = this.node.width/2;\r\n        randX = (Math.random() - 0.5) * 2 * maxX;\r\n        // 返回星星坐标\r\n        return cc.v2(randX, randY);\r\n    },\r\n\r\n\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n    /*\r\n    * 步骤十：1.3：加入计时器更新和判断超过时限的逻辑\r\n    * */\r\n    update: function (dt) {\r\n        // 每帧更新计时器，超过限度还没有生成新的星星\r\n        // 就会调用游戏失败逻辑\r\n        if (this.timer > this.starDuration) {\r\n            this.gameOver();\r\n            return;\r\n        }\r\n        this.timer += dt;\r\n    },\r\n\r\n\r\n    /*\r\n    * 步骤九：2.3： 更新 scoreDisplay Label 的文字\r\n    * */\r\n    gainScore: function () {\r\n        this.score += 1;\r\n        // 更新 scoreDisplay Label 的文字\r\n        this.scoreDisplay.string = 'Score: ' + this.score;\r\n\r\n        /*\r\n          * 步骤十一：2.2 插入播放声音的代码\r\n          * */\r\n        // 播放得分音效\r\n        cc.audioEngine.playEffect(this.scoreAudio, false);\r\n    },\r\n\r\n\r\n    /*\r\n    * 步骤十：1.4：游戏失败时重新加载场景\r\n    * */\r\n    gameOver: function () {\r\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\r\n        cc.director.loadScene('game');\r\n    }\r\n\r\n\r\n\r\n});\r\n"]}