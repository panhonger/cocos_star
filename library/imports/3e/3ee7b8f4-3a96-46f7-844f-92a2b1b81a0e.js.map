{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","default","type","AudioClip","setJumpAction","jumpUp","moveBy","v2","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","onLoad","jumpAction","node","runAction","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","start","update","dt","Math","abs","x"],"mappings":"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","file":"Player.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n/*\r\n* 步骤一：编写组件属性\r\n* 步骤二：编写跳跃和移动代码\r\n* 步骤三：开始动作\r\n* 步骤四：移动控制\r\n* 步骤五：制作星星（添加一个叫做 Star 的脚本）\r\n* 步骤六：添加游戏控制脚本（添加一个叫做 Game 的脚本）\r\n* 步骤七：在随机位置生成星星（game.js)\r\n* 步骤八：添加主角碰触收集星星的行为\r\n* 步骤九：添加得分 1、添加分数文字（Label）  2、在 Game 脚本中添加得分逻辑   3、在 Star 脚本中调用 Game 中的得分逻辑\r\n* 步骤十：失败判定和重新开始   1、为星星加入计时消失的逻辑\r\n* 步骤十一：加入音效  1、跳跃音效  2、得分音效\r\n* */\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        /*\r\n        * 步骤一：设置主角移动方式\r\n        * */\r\n        // 主角跳跃高度\r\n        jumpHeight: 0,\r\n        // 主角跳跃持续时间\r\n        jumpDuration: 0,\r\n        // 最大移动速度\r\n        maxMoveSpeed: 0,\r\n        // 加速度\r\n        accel: 0,\r\n\r\n\r\n        /*\r\n        * 步骤十一：1.1：添加引用声音文件资源的 jumpAudio 属性\r\n        * */\r\n        // 跳跃音效资源\r\n        jumpAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n    },\r\n\r\n    /*\r\n    *步骤二：编写跳跃和移动代码\r\n    * */\r\n    setJumpAction: function () {\r\n        // 跳跃上升\r\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\r\n        // 下落\r\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\r\n\r\n        /*\r\n       * 步骤十一：1.2：插入播放音效的回调，并通过添加 playJumpSound 方法来播放声音\r\n       * */\r\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\r\n        var callback = cc.callFunc(this.playJumpSound, this);\r\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\r\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\r\n    },\r\n\r\n    /*\r\n    * 步骤十一：1.3： 调用声音引擎播放声音\r\n    * */\r\n    playJumpSound: function () {\r\n        // 调用声音引擎播放声音\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    /*\r\n    * 步骤四：1、用 A 和 D 来控制他的跳跃方向\r\n    * */\r\n    onKeyDown (event) {\r\n        // set a flag when key pressed\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = true;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = true;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onKeyUp (event) {\r\n        // unset a flag when key released\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = false;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = false;\r\n                break;\r\n        }\r\n    },\r\n\r\n\r\n    // onLoad () {},\r\n    /*\r\n    * 步骤三：在 onLoad 方法里调用刚添加的 setJumpAction 方法，然后执行 runAction 来开始动作\r\n    * */\r\n    //onLoad 方法会在场景加载后立刻执行，所以我们会把初始化相关的操作和逻辑都放在这里面。\r\n    onLoad: function () {\r\n        // 初始化跳跃动作\r\n        this.jumpAction = this.setJumpAction();\r\n        this.node.runAction(this.jumpAction);\r\n\r\n\r\n        /*\r\n        * 步骤四：2、配合加入向左和向右加速的开关，以及主角当前在水平方向的速度；\r\n        *         最后再调用 cc.systemEvent，在场景加载后就开始监听键盘输入\r\n        * */\r\n        // 加速度方向开关\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // 主角当前水平方向速度\r\n        this.xSpeed = 0;\r\n\r\n        // 初始化键盘输入监听\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },\r\n    /*\r\n   * 步骤四：3、配合取消键盘输入监听\r\n   * */\r\n    onDestroy () {\r\n        // 取消键盘输入监听\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },\r\n\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n    /*\r\n  * 步骤四：4、添加加速度、速度和主角当前位置的设置\r\n    * */\r\n    update: function (dt) {\r\n        // 根据当前加速度方向每帧更新速度\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // 限制主角的速度不能超过最大值\r\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\r\n            // if speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // 根据当前速度更新主角的位置\r\n        this.node.x += this.xSpeed * dt;\r\n    },\r\n});\r\n"]}